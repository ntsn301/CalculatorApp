trigger:
  branches:
    include:
      - main
  paths:
    include:
      - '*'

pool:
  name: SelfHostedPool

variables:
  solution: 'MyCalculatorApp/MyCalculatorApp.sln'
  buildConfiguration: 'Release'
  artifactName: 'CalculatorAppArtifact'

stages:
- stage: Build
  displayName: 'Build and Test Stage'
  jobs:
  - job: BuildAndTest
    displayName: 'Build, Test, and Analyze'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'

    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: 'test'
        projects: 'MyCalculatorApp/CalculatorTests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" --settings MyCalculatorApp/CalculatorTests/coverlet.runsettings'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage Results'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        reportDirectory: '$(Agent.TempDirectory)/**/html'

    - task: SonarQubePrepare@6
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'MSBuild'
        projectKey: 'CalculatorApp'
        projectName: 'CalculatorApp'
        extraProperties: |
          sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml
          # DO NOT SET sonar.branch.name â€” it is not supported in Community Edition

    - task: DotNetCoreCLI@2
      displayName: 'Rebuild for SonarQube Analysis'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    - task: SonarQubeAnalyze@6
      displayName: 'Run SonarQube Analysis'
      inputs:
        jdkversion: 'JAVA_HOME_17_X64'

    - task: SonarQubePublish@6
      displayName: 'Publish SonarQube Results'

- stage: Deliver
  displayName: 'Deliver Stage'
  dependsOn: Build
  jobs:
  - job: DeliverArtifact
    displayName: 'Deliver Artifact'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Publish Artifact'
      inputs:
        command: 'publish'
        projects: 'MyCalculatorApp/MyCalculatorApp/*.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        publishWebProjects: false
        zipAfterPublish: false

    - task: PublishBuildArtifacts@1
      displayName: 'Upload Artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Deliver
  jobs:
  - deployment: DeployToDev
    displayName: 'Deploy to Dev Environment'
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: '$(artifactName)'
          - script: |
              echo "Deploying to Dev Environment..."
              cd $(Pipeline.Workspace)/CalculatorAppArtifact
              dotnet CalculatorApp.dll
            displayName: 'Deploy and Run in Dev'

  - deployment: DeployToQAT
    displayName: 'Deploy to QAT Environment'
    environment: 'QAT'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: '$(artifactName)'
          - script: |
              echo "Deploying to QAT Environment (Mock)..."
            displayName: 'Deploy to QAT (Mock)'

  - deployment: DeployToStaging
    displayName: 'Deploy to Staging Environment'
    environment: 'Staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: '$(artifactName)'
          - script: |
              echo "Deploying to Staging Environment (Mock)..."
            displayName: 'Deploy to Staging (Mock)'

  - deployment: DeployToProduction
    displayName: 'Deploy to Production Environment'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: '$(artifactName)'
          - script: |
              echo "Deploying to Production Environment (Mock)..."
            displayName: 'Deploy to Production (Mock)'
