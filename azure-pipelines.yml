trigger:
  branches:
    include:
      - main
  paths:
    include:
      - '*'

pool:
  name: SelfHostedPool  # Use self-hosted agent pool

variables:
  solution: 'MyCalculatorApp/MyCalculatorApp.sln'  # Path to the solution file
  buildConfiguration: 'Release'
  artifactName: 'CalculatorAppArtifact'
  appDllName: 'CalculatorApp.dll'  # Corrected DLL name to match the actual output

stages:
- stage: Build
  displayName: 'Build and Test Stage'
  jobs:
  - job: BuildAndTest
    displayName: 'Build, Test, and Analyze'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet Packages'
      inputs:
        command: 'restore'
        projects: '$(solution)'

    - task: DotNetCoreCLI@2
      displayName: 'Build Project'
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests'
      inputs:
        command: 'test'
        projects: 'MyCalculatorApp/CalculatorTests/*.csproj'  # Path to the test project
        arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage" --settings MyCalculatorApp/CalculatorTests/coverlet.runsettings'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Code Coverage Results'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        reportDirectory: '$(Agent.TempDirectory)/**/html'

    - script: |
        echo "Checking SonarQube server accessibility..."
        curl -f http://localhost:9000/api/system/status || echo "SonarQube server is not accessible!"
      displayName: 'Check SonarQube Server Accessibility'
      continueOnError: true  # Continue even if this step fails, for debugging

    - task: SonarQubePrepare@6  # Upgraded to latest version
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarQube: 'SonarQube'  # Use the correct service connection name
        scannerMode: 'MSBuild'
        projectKey: 'CalculatorApp'
        projectName: 'CalculatorApp'
        extraProperties: |
          sonar.cs.opencover.reportsPaths=$(Agent.TempDirectory)/**/coverage.opencover.xml
          sonar.branch.autoconfig.disabled=true  # Disable branch analysis for Community Edition

- stage: Deliver
  displayName: 'Deliver Stage'
  dependsOn: Build
  jobs:
  - job: DeliverArtifact
    displayName: 'Deliver Artifact'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Publish Artifact'
      inputs:
        command: 'publish'
        projects: 'MyCalculatorApp/MyCalculatorApp/*.csproj'  # Path to the console app project
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/MyCalculatorApp'  # Output to a subdirectory
        publishWebProjects: false
        zipAfterPublish: false

    # Add a debugging step to list the contents of the artifact staging directory
    - script: |
        echo Listing contents of artifact staging directory...
        dir "$(Build.ArtifactStagingDirectory)" /s
      displayName: 'Debug: List Artifact Staging Contents'
      continueOnError: true  # Continue even if this step fails, for debugging

    - task: PublishBuildArtifacts@1
      displayName: 'Upload Artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Deliver
  jobs:
  - deployment: DeployToDev
    displayName: 'Deploy to Dev Environment'
    environment: 'Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Artifact'
            inputs:
              buildType: 'current'
              artifactName: '$(artifactName)'
              targetPath: '$(Pipeline.Workspace)/CalculatorAppArtifact'

          # Add a debugging step to list the contents of the artifact directory
          - script: |
              echo Listing contents of artifact directory...
              dir "$(Pipeline.Workspace)/CalculatorAppArtifact" /s
            displayName: 'Debug: List Artifact Contents'
            continueOnError: true  # Continue even if this step fails, for debugging

          # Fix the script to navigate into the correct subdirectory and use the correct DLL name
          - script: |
              echo Deploying to Dev Environment...
              cd "$(Pipeline.Workspace)\CalculatorAppArtifact\MyCalculatorApp"
              if exist "$(appDllName)" (
                echo Running application...
                dotnet "$(appDllName)"
              ) else (
                echo Error: DLL file "$(appDllName)" not found in directory.
                dir /s
                exit /b 1
              )
            displayName: 'Deploy and Run in Dev'

  - deployment: DeployToQAT
    displayName: 'Deploy to QAT Environment'
    environment: 'QAT'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Artifact'
            inputs:
              buildType: 'current'
              artifactName: '$(artifactName)'
              targetPath: '$(Pipeline.Workspace)/CalculatorAppArtifact'

          - script: |
              echo Deploying to QAT Environment (Mock)...
            displayName: 'Deploy to QAT (Mock)'

  - deployment: DeployToStaging
    displayName: 'Deploy to Staging Environment'
    environment: 'Staging'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Artifact'
            inputs:
              buildType: 'current'
              artifactName: '$(artifactName)'
              targetPath: '$(Pipeline.Workspace)/CalculatorAppArtifact'

          - script: |
              echo Deploying to Staging Environment (Mock)...
            displayName: 'Deploy to Staging (Mock)'

  - deployment: DeployToProduction
    displayName: 'Deploy to Production Environment'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Artifact'
            inputs:
              buildType: 'current'
              artifactName: '$(artifactName)'
              targetPath: '$(Pipeline.Workspace)/CalculatorAppArtifact'

          - script: |
              echo Deploying to Production Environment (Mock)...
            displayName: 'Deploy to Production (Mock)'